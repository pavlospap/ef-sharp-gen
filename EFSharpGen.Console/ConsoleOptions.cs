using CommandLine;

namespace EFSharpGen.Console;

public class ConsoleOptions
{
    [Option('p', "project-path",
        Required = true,
        HelpText = "The C# project path.")]
    public string ProjectPath { get; set; } = default!;

    [Option('n', "default-namespace",
        Required = true,
        HelpText = "The C# project default namespace.")]
    public string DefaultNamespace { get; set; } = default!;

    [Option('e', "entities-path",
        Required = true,
        HelpText = "The path (relative to the project-path) where the entity " +
            "files will be created.")]
    public string EntitiesPath { get; set; } = default!;

    [Option('f', "configurations-path",
        Required = true,
        HelpText = "The path (relative to the project-path) where the " +
            "configuration files will be created.")]
    public string ConfigurationsPath { get; set; } = default!;

    [Option('u', "enums-path",
        Required = false,
        HelpText = "The path (relative to the project-path) where the enum files " +
            "will be created. If omitted, no separate files will be created for " +
            "enums and they will be included in the entity files.")]
    public string? EnumsPath { get; set; }

    [Option('a', "one-enums-file",
    Required = false,
    Default = false,
    HelpText = "Indicates if one file will be created for all the enums. This " +
        "will be taken under consideration only in case enums-path is specified.")]
    public bool OneEnumsFile { get; set; }

    [Option('c', "custom-assembly-path",
        Required = false,
        HelpText = "The path of an assemply that contains custom service " +
            "implementations for the EFSharpGen library.")]
    public string? CustomAssemblyPath { get; set; }

    [Option('s', "schema-file",
        Required = true,
        HelpText = "The path of the schema file.")]
    public string SchemaFile { get; set; } = default!;

    [Option('m', "schema-name",
        Required = false,
        HelpText = "The schema name.")]
    public string? SchemaName { get; set; }

    [Option('g', "auto-generated-tag",
        Required = false,
        Default = false,
        HelpText = "Indicates if an <auto-generated> tag will be added in the " +
            "generated files.")]
    public bool AutoGeneratedTag { get; set; }

    [Option('o', "file-scoped-namespaces",
        Required = false,
        Default = false,
        HelpText = "Indicates if file scoped namespaces will be used.")]
    public bool FileScopedNamespaces { get; set; }

    [Option('i', "implicit-global-usings",
        Required = false,
        Default = false,
        HelpText = "Indicates if implicit global usings are used in the C# " +
            "project.")]
    public bool ImplicitGlobalUsings { get; set; }

    [Option('x', "excluded-namespaces",
        Required = false,
        HelpText = "A list of namespaces to exclude from usings if implicit " +
            "global usings are used in the C# project.")]
    public IEnumerable<string>? ExcludedNamespaces { get; set; }

    [Option('b', "custom-db-names",
        Required = false,
        Default = false,
        HelpText = "Indicates if custom names for tables, columns, keys, and " +
            "indexes will be used. If true, the implementation of the " +
            "IEFConfigurationProvider interface will be used to retrieve these " +
            "names.")]
    public bool CustomDbNames { get; set; }

    [Option('v', "virtual-navigations",
        Required = false,
        Default = false,
        HelpText = "Indicates if virtual navigations will be used in the entities.")]
    public bool VirtualNavigations { get; set; }

    [Option('l', "list-navigations",
        Required = false,
        Default = false,
        HelpText = "Indicates if List<T> will be used for collection navigations " +
            "in the entities. If false, HashSet<T> will be used.")]
    public bool ListNavigations { get; set; }

    [Option('r', "nullable-reference-types",
        Required = false,
        Default = false,
        HelpText = "Indicates if nullable reference types are used in the C# " +
            "project.")]
    public bool NullableReferenceTypes { get; set; }
}
