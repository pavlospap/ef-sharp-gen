using System.Diagnostics;

using Microsoft.Extensions.Options;

namespace EFSharpGen.Miscellaneous;

/// <summary>
/// An implementation to format the generated files.
/// </summary>
/// <param name="options">The application options.</param>
/// <param name="fileRegistry">A service to register the generated files.</param>
public class CodeFormatter(
    IOptions<Options> options,
    IFileRegistry fileRegistry) : ICodeFormatter
{
    /// <summary>
    /// Formats the code in the generated files. You can get these files from
    /// the <see cref="IFileRegistry"/> service.
    /// </summary>
    public virtual void FormatFiles()
    {
        using var process = new Process
        {
            StartInfo = new()
            {
                WorkingDirectory = options.Value.ProjectPath,
                FileName = "dotnet",
                Arguments = BuildCommandArguments(
                    fileRegistry.GetRegisteredFiles()),
            }
        };

        process.Start();

        process.WaitForExit();
    }

    string BuildCommandArguments(List<string> files)
    {
        var relativePaths = GetRelativePaths(files);

        var args = $"format --include {string.Join(' ', relativePaths)}";

        if (options.Value.AutoGeneratedTag)
        {
            args += " --include-generated";
        }

        return args;
    }

    IEnumerable<string> GetRelativePaths(List<string> files)
    {
        return files
            .Select(file => "." +
                Path.DirectorySeparatorChar +
                Path.GetRelativePath(options.Value.ProjectPath, file));
    }
}
