namespace EFSharpGen.Design.Models;

/// <summary>
/// The property data type.
/// </summary>
public enum DataType
{
    /// <summary>
    /// Corresponds to the <see cref="System.Guid"></see> data type.
    /// </summary>
    Guid,

    /// <summary>
    /// Corresponds to the <see cref="string"></see> data type.
    /// </summary>
    String,

    /// <summary>
    /// Corresponds to the <see cref="byte"></see> data type.
    /// </summary>
    Int8,

    /// <summary>
    /// Corresponds to the <see cref="short"></see> data type.
    /// </summary>
    Int16,

    /// <summary>
    /// Corresponds to the <see cref="int"></see> data type.
    /// </summary>
    Int32,

    /// <summary>
    /// Corresponds to the <see cref="long"></see> data type.
    /// </summary>
    Int64,

    /// <summary>
    /// Corresponds to the <see cref="System.DateTime"></see> data type.
    /// </summary>
    DateTime,

    /// <summary>
    /// Corresponds to the <see cref="bool"></see> data type.
    /// </summary>
    Boolean,

    /// <summary>
    /// Corresponds to the <see cref="T:byte[]"></see> data type.
    /// </summary>
    Blob
}

/// <summary>
/// Represents a property of an entity.
/// </summary>
public class Property
{
    /// <summary>
    /// The property name.
    /// </summary>
    public string Name { get; set; } = default!;

    /// <summary>
    /// The property data type.
    /// </summary>
    public DataType DataType { get; set; }

    /// <summary>
    /// The property size in case <see cref="DataType"/> is 
    /// <see cref="DataType.String"></see>.
    /// </summary>
    public long Size { get; set; }

    /// <summary>
    /// Indicates if the property is a primary key.
    /// </summary>
    public bool IsPrimaryKey { get; set; }

    /// <summary>
    /// Indicates if the property value is auto-generated in case
    /// <see cref="IsPrimaryKey"/> is true.
    /// </summary>
    public bool IsAutoGenerated { get; set; }

    /// <summary>
    /// Indicates if the property is nullable.
    /// </summary>
    public bool IsNullable { get; set; }

    /// <summary>
    /// Indicates if the property size is fixed in case <see cref="DataType"/>
    /// is <see cref="DataType.String"></see>. 
    /// </summary>
    public bool HasFixedSize { get; set; }

    /// <summary>
    /// Indicates if the property is an array.
    /// </summary>
    public bool IsArray { get; set; }

    /// <summary>
    /// Indicates if the property is an enum.
    /// </summary>
    public bool IsEnum { get; set; }

    /// <summary>
    /// The enum name in case we want the enum name to be different than the
    /// property name.
    /// </summary>
    public string? EnumName { get; set; }

    /// <summary>
    /// The enum values in case <see cref="IsEnum"></see> is true.
    /// </summary>
    public IReadOnlyDictionary<string, long>? EnumValues { get; set; }
}
