using EFSharpGen.Generators.Configurations;

namespace EFSharpGen;

/// <summary>
/// The application options.
/// </summary>
public class Options
{
    /// <summary>
    /// The C# project path.
    /// </summary>
    public string ProjectPath { get; set; } = default!;

    /// <summary>
    /// The C# project default namespace.
    /// </summary>
    public string DefaultNamespace { get; set; } = default!;

    /// <summary>
    /// The path (relative to the <see cref="ProjectPath"/>) where the entity
    /// files will be created.
    /// </summary>
    public string EntitiesPath { get; set; } = default!;

    /// <summary>
    /// The path (relative to the <see cref="ProjectPath"/>) where the
    /// configuration files will be created.
    /// </summary>
    public string ConfigurationsPath { get; set; } = default!;

    /// <summary>
    /// The path (relative to the <see cref="ProjectPath"/>) where the enum files
    /// will be created. If omitted, no separate files will be created for enums
    /// and they will be included in the entity files.
    /// </summary>
    public string? EnumsPath { get; set; }

    /// <summary>
    /// Indicates if one file will be created for all the enums. This will be taken
    /// under consideration only in case <see cref="EnumsPath"/> is specified. The
    /// default value is false.
    /// </summary>
    public bool EnumsOneFile { get; set; }

    /// <summary>
    /// The path of the schema file.
    /// </summary>
    public string SchemaFile { get; set; } = default!;

    /// <summary>
    /// The schema name.
    /// </summary>
    public string? SchemaName { get; set; }

    /// <summary>
    /// Indicates if an &lt;auto-generated&gt; tag will be added in the generated
    /// files. The default value is false.
    /// </summary>
    public bool AutoGeneratedTag { get; set; }

    /// <summary>
    /// Indicates if file scoped namespaces will be used. The default value is
    /// false.
    /// </summary>
    public bool FileScopedNamespaces { get; set; }

    /// <summary>
    /// Indicates if implicit global usings are used in the C# project. The
    /// default value is false.
    /// </summary>
    public bool ImplicitGlobalUsings { get; set; }

    /// <summary>
    /// A list of namespaces to exclude from usings if implicit global usings
    /// are used in the C# project.
    /// </summary>
    public List<string> ExcludedNamespaces { get; set; } = [];

    /// <summary>
    /// Indicates if custom names for tables, columns, keys, and indexes will be
    /// used. If true, the implementation of the <see cref="IEFConfigurationProvider"/>
    /// interface will be used to retrieve these names. The default value is false.
    /// </summary>
    public bool CustomDbNames { get; set; }

    /// <summary>
    /// Indicates if virtual navigations will be used in the entities. The
    /// default value is false.
    /// </summary>
    public bool VirtualNavigations { get; set; }

    /// <summary>
    /// Indicates if <see cref="List{T}"></see> will be used for collection
    /// navigations in the entities. If false, <see cref="HashSet{T}"></see>
    /// will be used. The default value is false.
    /// </summary>
    public bool ListNavigations { get; set; }

    /// <summary>
    /// Indicates if nullable reference types are used in the C# project. The
    /// default value is false.
    /// </summary>
    public bool NullableReferenceTypes { get; set; }
}
