using System.Text;

using EFSharpGen.Design.Models;

using Microsoft.Extensions.Options;

namespace EFSharpGen.Generators.Configurations;

/// <summary>
/// An implementation to generate the code for the primary key configuration.
/// </summary>
/// <param name="options">The application options.</param>
/// <param name="efConfigurationProvider">A service to provide configuration for
/// the Entity Framework.</param>
/// <param name="compositeKeyCodeGenerator">A service to generate the code for a
/// composite key configuration.</param>
public class ConfigurationPrimaryKeyCodeGenerator(
    IOptions<Options> options,
    IEFConfigurationProvider efConfigurationProvider,
    IConfigurationCompositeKeyCodeGenerator compositeKeyCodeGenerator) :
    IConfigurationPrimaryKeyCodeGenerator
{
    /// <summary>
    /// Generates the code for the primary key configuration.
    /// </summary>
    /// <param name="entity">The <see cref="Entity"/> for which the code will be
    /// generated.</param>
    /// <returns>The code for the primary key configuration.</returns>
    public virtual string? Code(Entity entity)
    {
        var pkProperties = entity.Properties.Where(p => p.IsPrimaryKey);

        if (!pkProperties.Any())
            return null;

        var sb = new StringBuilder();

        if (pkProperties.Count() == 1)
        {
            sb.Append($"builder.HasKey(e=>e.{pkProperties.Single().Name})");
        }
        else
        {
            var lambda = compositeKeyCodeGenerator.BuildCompositeKeyLambda(
                pkProperties.Select(p => p.Name));

            sb.Append($"builder.HasKey({lambda})");
        }

        if (options.Value.CustomDbNames)
        {
            var primaryKeyName =
                efConfigurationProvider.GetPrimaryKeyName(entity);

            sb.AppendLine();

            sb.AppendLine(tabs: 1, $".HasName(\"{primaryKeyName}\");");
        }
        else
        {
            sb.AppendLine(";");
        }

        var autoGenerateTypes = new DataType[] {
            DataType.Int8,
            DataType.Int16,
            DataType.Int32,
            DataType.Int64
        };

        var nonAutoGeneratedPkProperties = pkProperties
            .Where(p => !p.IsAutoGenerated)
            .Where(p => autoGenerateTypes.Contains(p.DataType));

        foreach (var property in nonAutoGeneratedPkProperties)
        {
            sb.AppendLine();

            sb.AppendLine($"builder.Property(e=>e.{property.Name})");

            sb.AppendLine(tabs: 1, ".ValueGeneratedNever();");
        }

        return sb.ToString();
    }
}
