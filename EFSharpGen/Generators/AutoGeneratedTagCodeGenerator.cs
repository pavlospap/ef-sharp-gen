using EFSharpGen.Design.Models;

using Microsoft.Extensions.Options;

namespace EFSharpGen.Generators;

/// <summary>
/// An implementation to get the &lt;auto-generated&gt; tag.
/// </summary>
/// <param name="options">The application options.</param>
public class AutoGeneratedTagCodeGenerator(IOptions<Options> options) :
    IAutoGeneratedTagCodeGenerator
{
    /// <summary>
    /// Returns the &lt;auto-generated&gt; tag if
    /// <see cref="Options.AutoGeneratedTag"/> is true.
    /// </summary>
    /// <param name="entity">The <see cref="Entity"/> for which the code will be
    /// generated.</param>
    /// <returns>The &lt;auto-generated&gt; tag.</returns>
    public virtual string? Code(Entity entity)
    {
        if (!options.Value.AutoGeneratedTag)
        {
            return null;
        }

        var lines = Resources.AutoGeneratedTag
            .Split('\n', StringSplitOptions.None)
            .Select(l => l.Trim());

        return string.Join(Environment.NewLine, lines);
    }
}
