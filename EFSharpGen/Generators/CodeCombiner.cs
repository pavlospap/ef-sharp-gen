using System.Text;

using EFSharpGen.Design.Models;

namespace EFSharpGen.Generators;

/// <summary>
/// An implementation to combine pieces of code generated by the provided code
/// generators.
/// </summary>
public class CodeCombiner : ICodeCombiner
{
    /// <summary>
    /// Combines pieces of code generated by the provided code generators. Î¤he
    /// pieces will be combined in the same order the generators are provided.
    /// </summary>
    /// <param name="entity">The <see cref="Entity"/> for which the code will be
    /// generated.</param>
    /// <param name="generators">An array of code generators which will generate
    /// the code pieces.</param>
    /// <returns>The combined code.</returns>
    public virtual string CombineCode(
        Entity entity, params ICodeGenerator[] generators)
    {
        var sb = new StringBuilder();

        var codeLength = 0;

        var blocks = 0;

        foreach (var generator in generators)
        {
            var code = generator.Code(entity);

            if (string.IsNullOrWhiteSpace(code))
            {
                continue;
            }

            if (codeLength < sb.Length)
            {
                sb.AppendLine();
            }

            sb.Append(code);

            if (generator.IsBlockStart)
            {
                blocks++;

                codeLength = sb.Length;
            }
        }

        for (var i = 1; i <= blocks; i++)
        {
            sb.AppendLine("}");
        }

        return sb.ToString();
    }
}
